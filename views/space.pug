extends masebook.pug

block scripts
    script.
        const actions = {};
        actions.follow = () => {
            console.error('not implemented');
        };

        actions.unfollow = () => {
            console.error('not implemented');
        };

        actions.join = () => {
            console.error('not implemented');
        }

        actions.leave = () => {
            console.error('not implemented');
        }

        actions.createPost = async (postText) => { return await post(window.location.href, postText); };
        
        actions.createComment = (postId, commentText) => {
            console.error('not implemented');
        }


block title
    title Masebook | #{space.settings.title}

block content
    h1 #{space.settings.title}
        if user.space.role >= 3
            span.editor-link [
                a(href=space.shortname+'/edit') edit
                | ]

    if space.settings.description
        p #{space.settings.description} &nbsp;

    if user.space.permissions.view_posts
        button.link-style() follow

    if user.space.permissions.view_members
        button.link-style(onclick="show('members')") members
    
    button.link-style(onclick="show('permissions')") permissions
    #permissions.hidden
        h3 Permissions [#{levelToRole[user.space.role]}]
        table#permissions-table
            thead
                tr
                    th action
                    th minimum role
                    th allowed
            tbody
                - for (const [k,v] of Object.entries(space.permissions))
                    tr
                        td=k.replaceAll('_', ' ')
                        td=levelToRole[v]
                        td=user.space.permissions[k] ? 'yes' : 'no'
                
    if user.space.permissions.view_members
        #members.hidden
            h3 Members [#{people.length}]
            ul
                each person in people
                    li
                        +user-link(person)
                        if person.role != 1
                            span.role [#{levelToRole[person.role]}]
    script.
        let previous = null;

        function show(id) {
            const current = document.getElementById(id);
            current.classList.toggle('hidden');

            if (previous === null) {
                previous = current;
            }
            else if (previous === current) {
                previous = null;
            }
            else {
                previous.classList.toggle('hidden');
                previous = current;
            }            
        }
    
    if user.space.permissions.view_posts || user.space.permissions.create_posts
        h2 Posts
    
    if user.space.permissions.create_posts
        .spacer
            button.link-style#toggle-post-editor(onclick="togglePostEditor()") create post
            form#new-post-form.hidden
                label Posting as '#{user.shortname}'...
                    textarea#post-text.post-text(name='posttext', wrap='hard', oninput='this.style.height = "";this.style.height = this.scrollHeight + "px"', autocomplete="off")
                    input#submit-button(type='submit' value='post') 
                    input#cancel-button(type='reset', onclick="togglePostEditor()", value='cancel')

        script.
            function togglePostEditor() {
                elements['new-post-form'].classList.toggle('hidden');
                elements['toggle-post-editor'].classList.toggle('hidden');
            }

            elements['new-post-form'].addEventListener('submit', async event => {
                event.preventDefault();

                // UI waiting state
                elements['posttext'].readOnly = true;
                elements['submit-button'].disabled = true;
                elements['cancel-button'].disabled = true;

                // get postText from form
                const data = new FormData(elements['new-post-form']);
                let postText = data.get('posttext') ?? '';
                postText = postText.trim();

                if (postText.length > 0) {
                    // create post
                    const res = await actions.createPost({ postText });

                    // handle UI in response
                    if (res.ok) {
                        window.location.reload();
                        return;
                    }
                    else {
                        const error = await res.json();
                        console.error(error);
                    }
                }

                elements['post-text'].value = '';
                elements['post-text'].readOnly = false;
                elements['submit-button'].disabled = false;
                elements['cancel-button'].disabled = false;
            });
    
    if user.space.permissions.view_posts
        if posts.length > 0
            each p in posts
                +post(p)
        else
            p no posts to show...