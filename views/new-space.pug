extends masebook
include form-mixins

block title
    title New Space

block content
    h1= titleText
    p#status
    form#space-editor
        +textField(
            'settings.title',
            'Title',
            'Must be unique.'
        )(minlength=1, maxlength=64, required)
        +textField(
            'settings.description',
            'Description'
        )
        +textField(
            'shortname',
            'shortname',
            'A unique identifier for this space that will be used in its URL. Can only contain alphanumeric characters and underscores. Must start with a character from the alphabet.'
        )(minlength=3, maxlength=32, required, pattern='^[a-z][a-z0-9_-]{2,31}$')

        +checkBox('settings.public', 'Public (visible to non-members)', false)
        +checkBox('settings.show_in_dir', 'Show in Server Directory', true)
        
        fieldset.form-item#permissions-editor
            legend Permissions
            span.permissions-col-header='role required to...'
            each role in levelToRole
                span.permissions-col-header=role
            +permission('permissions.view_members', 'view members', 1)
            +permission('permissions.view_posts', 'view posts', 1)
            +permission('permissions.create_posts', 'create posts', 1)
            +permission('permissions.delete_posts', 'delete posts', 2)
            +permission('permissions.view_comments', 'view comments', 1)
            +permission('permissions.create_comments', 'view comments', 1)
            +permission('permissions.delete_comments', 'view comments', 2)
        
        .form-item
            label(for='submit')
                input#submit(type='submit', value='submit')
    script(type='module').
        import { expand } from '/public/js/masebook.js';

        const form = document.getElementById('space-editor');
        const submitButton = document.getElementById('submit');
        const status = document.getElementById('status');
        form.addEventListener('submit', async event => {
            event.preventDefault();
            submitButton.disabled = true;
            const data = Object.fromEntries((new FormData(form)).entries());

            // Format data for use by backend
            const space = expand(data);

            // Send data to server
            try {
                const fetchOptions = {
                    method: 'POST',
                    redirect: 'follow',
                    headers: {
                        "Content-Type": "application/json",
                        Accept: "application/json"
                    },
                    body: JSON.stringify(space),
                }
                
                fetch('/s', fetchOptions)
                    .then(async res => {
                        if (res.redirected) {
                            window.location.href = res.url;
                        }
                        else {
                            const errorText = await res.text();
                            throw new Error(errorText);
                        }
                    })
                    .catch(err => {
                        status.classList.add('failure');
                        submitButton.disabled = false;
                        const details = JSON.parse(err.message);
                        status.textContent = `ERROR: ${details.msg}`;
                        if (details.issues) {
                            for (const k in details.issues) {
                                const id = k + '_issue';
                                const element = document.getElementById(id);
                                element.textContent = details.issues[k];
                            }
                        }
                        document.getElementById('content').scroll({top: 0, left: 0, behavior: 'smooth'})
                    });
            }
            catch (err) {
                console.log(err.message);
            }
        });